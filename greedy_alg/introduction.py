# Жадный алгоритм — алгоритм, заключающийся в принятии локально оптимальных
# решений на каждом этапе, допуская, что конечное решение также окажется
# оптимальным.

# Есть N задач, чтобы решить любую из этих задач, требуется один час. За решение задачи
# под номером i, вы получаете c[i] монет. Как получить максимальное количество монет, если
# у вас есть всего К свободных часов?

# Нужно взять К задач, которые дают максимальное количество монет. Для этого можно K раз
# выбрать из оставшихся невыполненных задач ту, которая даёт больше всего монет (жадно
# берём каждый раз задачу, которая даст самое большое количество монет в данный момент,
# а что будет дальше — не думаем):


def solve(tasks: list[int], k: int) -> int:
    tasks.sort(reverse=True)
    sum = 0
    for i in range(0, k):
        if i >= len(tasks):
            break
        sum += tasks[i]
    return sum


f = [4, 5, 1, 3, 55, 20, 11, 66, 48]
res = solve(f, 3)
print(res)
